# CloudWatch Monitoring & Alerting Stack for DealershipAI
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Comprehensive monitoring, alerting, and observability stack'

Parameters:
  Environment:
    Type: String
    Default: production

  AlertEmail:
    Type: String
    Description: Email address for critical alerts
    Default: alerts@dealershipai.com

  SlackWebhookURL:
    Type: String
    Description: Slack webhook URL for notifications
    NoEcho: true

Resources:
  # SNS Topic for Alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${Environment}-dealershipai-alerts'
      DisplayName: DealershipAI Critical Alerts

  AlertEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref AlertTopic
      Endpoint: !Ref AlertEmail

  # Lambda for Slack Notifications
  SlackNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-dealershipai-slack-alerts'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SLACK_WEBHOOK_URL: !Ref SlackWebhookURL
      Code:
        ZipFile: |
          import json
          import urllib3
          import os

          def lambda_handler(event, context):
              webhook_url = os.environ['SLACK_WEBHOOK_URL']
              http = urllib3.PoolManager()

              for record in event['Records']:
                  message = json.loads(record['Sns']['Message'])

                  slack_message = {
                      "text": f"ðŸš¨ DealershipAI Alert",
                      "attachments": [{
                          "color": "danger",
                          "fields": [
                              {
                                  "title": "Alert",
                                  "value": message['AlarmName'],
                                  "short": True
                              },
                              {
                                  "title": "Status",
                                  "value": message['NewStateValue'],
                                  "short": True
                              },
                              {
                                  "title": "Reason",
                                  "value": message['NewStateReason'],
                                  "short": False
                              }
                          ]
                      }]
                  }

                  response = http.request('POST', webhook_url,
                                        body=json.dumps(slack_message),
                                        headers={'Content-Type': 'application/json'})

              return {'statusCode': 200, 'body': 'Success'}

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SlackSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn: !Ref AlertTopic
      Endpoint: !GetAtt SlackNotificationFunction.Arn

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SlackNotificationFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref AlertTopic

  # CloudWatch Dashboard
  DealershipAIDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${Environment}-DealershipAI-Monitoring'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0, "y": 0,
              "width": 12, "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${AWS::StackName}-alb" ],
                  [ ".", "TargetResponseTime", ".", "." ],
                  [ ".", "HTTPCode_Target_2XX_Count", ".", "." ],
                  [ ".", "HTTPCode_Target_4XX_Count", ".", "." ],
                  [ ".", "HTTPCode_Target_5XX_Count", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Application Load Balancer Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12, "y": 0,
              "width": 12, "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization", "AutoScalingGroupName", "${AWS::StackName}-asg" ],
                  [ ".", "NetworkIn", ".", "." ],
                  [ ".", "NetworkOut", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "EC2 Instance Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0, "y": 6,
              "width": 12, "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/RDS", "CPUUtilization", "DBInstanceIdentifier", "${AWS::StackName}-postgres" ],
                  [ ".", "DatabaseConnections", ".", "." ],
                  [ ".", "ReadLatency", ".", "." ],
                  [ ".", "WriteLatency", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "RDS PostgreSQL Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12, "y": 6,
              "width": 12, "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ElastiCache", "CPUUtilization", "CacheClusterId", "${AWS::StackName}-redis" ],
                  [ ".", "CurrConnections", ".", "." ],
                  [ ".", "CacheMisses", ".", "." ],
                  [ ".", "CacheHits", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Redis Cache Metrics",
                "period": 300
              }
            }
          ]
        }

  # CloudWatch Alarms
  HighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${Environment}-DealershipAI-HighErrorRate'
      AlarmDescription: 'High error rate detected'
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      Dimensions:
        - Name: LoadBalancer
          Value: !Sub '${AWS::StackName}-alb'

  HighResponseTimeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${Environment}-DealershipAI-HighResponseTime'
      AlarmDescription: 'Response time is too high'
      MetricName: TargetResponseTime
      Namespace: AWS/ApplicationELB
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 2.0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      Dimensions:
        - Name: LoadBalancer
          Value: !Sub '${AWS::StackName}-alb'

  DatabaseHighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${Environment}-DealershipAI-DatabaseHighCPU'
      AlarmDescription: 'Database CPU usage is high'
      MetricName: CPUUtilization
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Sub '${AWS::StackName}-postgres'

  DatabaseConnectionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${Environment}-DealershipAI-DatabaseConnections'
      AlarmDescription: 'Too many database connections'
      MetricName: DatabaseConnections
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Sub '${AWS::StackName}-postgres'

  # Custom Application Metrics
  ApplicationMetricsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${Environment}-dealershipai-app'
      RetentionInDays: 14

  # Health Check Alarm
  HealthCheckAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${Environment}-DealershipAI-HealthCheck'
      AlarmDescription: 'Application health check failing'
      MetricName: UnHealthyHostCount
      Namespace: AWS/ApplicationELB
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      Dimensions:
        - Name: TargetGroup
          Value: !Sub '${AWS::StackName}-tg'

  # Cost Monitoring Alarm
  HighCostAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${Environment}-DealershipAI-HighCosts'
      AlarmDescription: 'Monthly costs are higher than expected'
      MetricName: EstimatedCharges
      Namespace: AWS/Billing
      Statistic: Maximum
      Period: 86400
      EvaluationPeriods: 1
      Threshold: 500
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      Dimensions:
        - Name: Currency
          Value: USD

Outputs:
  DashboardURL:
    Description: CloudWatch Dashboard URL
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${Environment}-DealershipAI-Monitoring'

  AlertTopicArn:
    Description: SNS Topic ARN for alerts
    Value: !Ref AlertTopic
    Export:
      Name: !Sub '${AWS::StackName}-AlertTopic'