// DealershipAI Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Alternative PostgreSQL config (uncomment for production):
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

model Dealer {
  id          String   @id // Use our custom IDs like 'toyota-naples'
  name        String
  email       String   @unique
  website     String?
  location    String?
  tier        Int      @default(1)
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  prompts     PromptRun[]
  batchTests  BatchTest[]
  schemas     SchemaValidation[]
  costEntries CostEntry[]

  @@map("dealers")
}

model PromptRun {
  id          String   @id @default(cuid())
  promptId    String
  dealerId    String
  variables   String // JSON string for SQLite compatibility
  response    String?
  engine      String
  model       String
  tokensUsed  Int?
  cost        Float?
  latencyMs   Int?
  status      String   @default("pending")
  createdAt   DateTime @default(now())

  // Relations
  dealer      Dealer   @relation(fields: [dealerId], references: [id])

  @@map("prompt_runs")
}

model BatchTest {
  id          String   @id @default(cuid())
  dealerId    String
  name        String
  description String?
  status      String   @default("pending")
  prompts     String // JSON string for SQLite compatibility
  results     String? // JSON string for SQLite compatibility
  progress    Int      @default(0)
  createdAt   DateTime @default(now())
  startedAt   DateTime?
  completedAt DateTime?

  // Relations
  dealer      Dealer   @relation(fields: [dealerId], references: [id])

  @@map("batch_tests")
}

model SchemaValidation {
  id          String   @id @default(cuid())
  dealerId    String
  url         String
  status      String
  schemasFound Int     @default(0)
  results     String // JSON string for SQLite compatibility
  score       Int      @default(0)
  createdAt   DateTime @default(now())

  // Relations
  dealer      Dealer   @relation(fields: [dealerId], references: [id])

  @@map("schema_validations")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String?  // Optional for OAuth users
  name          String?
  role          String   @default("user") // admin, dealer, user
  dealerId      String?
  isActive      Boolean  @default(true)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  dealer       Dealer?    @relation(fields: [dealerId], references: [id])
  costEntries  CostEntry[]
  accounts     Account[]
  sessions     Session[]

  @@map("users")
}

// Cost tracking for AI usage
model CostEntry {
  id           String   @id @default(cuid())
  userId       String
  dealerId     String?
  provider     String   // openai, anthropic, google
  model        String
  operation    String   @default("completion")
  inputTokens  Int      @default(0)
  outputTokens Int      @default(0)
  totalCost    Float
  metadata     String? // JSON string for SQLite compatibility
  createdAt    DateTime @default(now())

  // Relations
  user         User     @relation(fields: [userId], references: [id])
  dealer       Dealer?  @relation(fields: [dealerId], references: [id])

  @@map("cost_entries")
}

// Prompt templates
model PromptTemplate {
  id          String   @id // Custom IDs like 'seo_audit_basic'
  name        String
  description String?
  category    String
  template    String   // SQLite doesn't need @db.Text
  variables   String   // JSON string instead of array for SQLite
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("prompt_templates")
}

// Enhanced queue jobs to match our implementation
model QueueJob {
  id           String   @id @default(cuid())
  type         String   // job type like 'seo_audit', 'batch-test'
  status       String   @default("pending") // pending, processing, completed, failed, cancelled
  priority     String   @default("normal") // low, normal, high
  payload      String // JSON string for SQLite compatibility
  result       String? // JSON string for SQLite compatibility
  error        String?
  attempts     Int      @default(0)
  maxAttempts  Int      @default(3)
  metadata     String? // JSON string for SQLite compatibility    // userId, dealerId, etc.
  createdAt    DateTime @default(now())
  startedAt    DateTime?
  completedAt  DateTime?
  processingTime Int?   // milliseconds

  @@map("queue_jobs")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}