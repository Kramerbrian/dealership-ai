exports.id=8909,exports.ids=[8909],exports.modules={27757:(a,b,c)=>{"use strict";c.d(b,{g:()=>g});var d=c(88357),e=c(31023);class f{constructor(a={}){this.jobs=new Map,this.processors=new Map,this.processing=new Set,this.isRunning=!1,this.metrics={processedJobs:0,totalProcessingTime:0,startTime:Date.now()},this.options={concurrency:a.concurrency||parseInt(process.env.QUEUE_CONCURRENCY||"5"),defaultPriority:a.defaultPriority||"normal",defaultMaxAttempts:a.defaultMaxAttempts||3,jobTimeout:a.jobTimeout||3e5},this.start(),setInterval(()=>this.cleanup(),36e5)}registerProcessor(a,b){this.processors.set(a,b),d.vF.info("Job processor registered",{jobType:a})}async add(a,b,c={}){let f=`job_${Date.now()}_${Math.random().toString(36).substring(7)}`,g={id:f,type:a,payload:b,status:"pending",priority:c.priority||this.options.defaultPriority,attempts:0,maxAttempts:c.maxAttempts||this.options.defaultMaxAttempts,createdAt:new Date,metadata:c.metadata||{}};return this.jobs.set(f,g),await e.P.set(e.P.queueKey("job",f),g,86400),d.vF.info("Job added to queue",{jobId:f,type:a,priority:g.priority,queueSize:this.jobs.size}),this.isRunning||this.start(),f}async get(a){let b=this.jobs.get(a);return!b&&(b=await e.P.get(e.P.queueKey("job",a)))&&this.jobs.set(a,b),b||null}async cancel(a){let b=await this.get(a);return!!b&&"pending"===b.status&&(b.status="cancelled",b.completedAt=new Date,await e.P.set(e.P.queueKey("job",a),b,86400),d.vF.info("Job cancelled",{jobId:a}),!0)}async retry(a){let b=await this.get(a);return!!b&&"failed"===b.status&&(b.status="pending",b.attempts=0,b.error=void 0,b.startedAt=void 0,b.completedAt=void 0,await e.P.set(e.P.queueKey("job",a),b,86400),d.vF.info("Job retried",{jobId:a}),!0)}start(){this.isRunning||(this.isRunning=!0,this.processJobs(),d.vF.info("Queue processing started",{concurrency:this.options.concurrency}))}stop(){this.isRunning=!1,d.vF.info("Queue processing stopped")}async processJobs(){for(;this.isRunning;)try{if(this.processing.size>=this.options.concurrency){await new Promise(a=>setTimeout(a,1e3));continue}let a=this.getNextJob();if(!a){await new Promise(a=>setTimeout(a,1e3));continue}this.processJob(a)}catch(a){d.vF.error("Queue processing error",a instanceof Error?a:Error(String(a))),await new Promise(a=>setTimeout(a,5e3))}}getNextJob(){return Array.from(this.jobs.values()).filter(a=>"pending"===a.status).sort((a,b)=>{let c={urgent:4,high:3,normal:2,low:1},d=c[b.priority]-c[a.priority];return 0!==d?d:a.createdAt.getTime()-b.createdAt.getTime()})[0]||null}async processJob(a){let b=this.processors.get(a.type);if(!b){a.status="failed",a.error=`No processor registered for job type: ${a.type}`,a.completedAt=new Date,await e.P.set(e.P.queueKey("job",a.id),a,86400);return}this.processing.add(a.id),a.status="processing",a.startedAt=new Date,a.attempts++,await e.P.set(e.P.queueKey("job",a.id),a,86400),d.vF.info("Job processing started",{jobId:a.id,type:a.type,attempt:a.attempts});try{let c=new Promise((a,b)=>setTimeout(()=>b(Error("Job timeout")),this.options.jobTimeout)),e=await Promise.race([b(a),c]);a.status="completed",a.result=e,a.completedAt=new Date;let f=a.completedAt.getTime()-a.startedAt.getTime();this.metrics.processedJobs++,this.metrics.totalProcessingTime+=f,d.vF.info("Job completed successfully",{jobId:a.id,type:a.type,processingTime:f})}catch(c){let b=c instanceof Error?c.message:String(c);a.attempts>=a.maxAttempts?(a.status="failed",a.error=b,a.completedAt=new Date,d.vF.error("Job failed permanently",c instanceof Error?c:Error(String(c)),{jobId:a.id,type:a.type,attempts:a.attempts})):(a.status="pending",a.startedAt=void 0,d.vF.warn("Job failed, will retry",{jobId:a.id,type:a.type,attempt:a.attempts,maxAttempts:a.maxAttempts,error:b}))}finally{this.processing.delete(a.id),await e.P.set(e.P.queueKey("job",a.id),a,86400)}}async getMetrics(){let a=Array.from(this.jobs.values()),b=a.filter(a=>"pending"===a.status).length,c=a.filter(a=>"processing"===a.status).length,d=a.filter(a=>"completed"===a.status).length,e=a.filter(a=>"failed"===a.status).length,f=this.metrics.processedJobs>0?this.metrics.totalProcessingTime/this.metrics.processedJobs:void 0,g=(Date.now()-this.metrics.startTime)/36e5,h=g>0?this.metrics.processedJobs/g:void 0;return{pending:b,processing:c,completed:d,failed:e,total:a.length,avgProcessingTime:f,throughputPerHour:h}}async listJobs(a={}){let b=Array.from(this.jobs.values());a.status&&(b=b.filter(b=>b.status===a.status)),a.type&&(b=b.filter(b=>b.type===a.type)),b.sort((a,b)=>b.createdAt.getTime()-a.createdAt.getTime());let c=a.offset||0,d=a.limit||50;return b.slice(c,c+d)}async getJobsByStatus(a){return this.listJobs({status:a})}async cleanup(){let a=new Date;a.setHours(a.getHours()-24);let b=Array.from(this.jobs.values()).filter(b=>("completed"===b.status||"failed"===b.status)&&b.completedAt&&b.completedAt<a);for(let a of b)this.jobs.delete(a.id),await e.P.del(e.P.queueKey("job",a.id));b.length>0&&d.vF.info("Cleaned up old jobs",{count:b.length})}async pause(){this.isRunning=!1,d.vF.info("Queue paused")}async resume(){this.start(),d.vF.info("Queue resumed")}async clear(a){let b=Array.from(this.jobs.values());for(let c of(a&&(b=b.filter(b=>b.status===a)),b))this.jobs.delete(c.id),await e.P.del(e.P.queueKey("job",c.id));return d.vF.info("Queue cleared",{count:b.length,status:a||"all"}),b.length}}let g=new f},31023:(a,b,c)=>{"use strict";c.d(b,{P:()=>h});var d=c(88357);class e{constructor(){this.cache=new Map,this.cleanupInterval=setInterval(()=>this.cleanup(),3e5)}cleanup(){let a=Date.now();for(let[b,c]of this.cache.entries())a-c.created>1e3*c.ttl&&this.cache.delete(b)}async get(a){let b=this.cache.get(a);return b?Date.now()-b.created>1e3*b.ttl?(this.cache.delete(a),null):b.value:null}async set(a,b,c=3600){this.cache.set(a,{value:b,ttl:c,created:Date.now()})}async del(a){this.cache.delete(a)}async exists(a){let b=this.cache.get(a);return!!b&&(!(Date.now()-b.created>1e3*b.ttl)||(this.cache.delete(a),!1))}async flush(){this.cache.clear()}destroy(){clearInterval(this.cleanupInterval),this.cache.clear()}}class f{constructor(){this.connected=!1,this.initRedis()}async initRedis(){try{if(!process.env.REDIS_URL)return void d.vF.info("No Redis URL provided, skipping Redis initialization");let a=(await Promise.all([c.e(8692),c.e(8927)]).then(c.t.bind(c,78927,23))).default;this.redis=new a(process.env.REDIS_URL),this.redis.on("connect",()=>{this.connected=!0,d.vF.info("Redis connected")}),this.redis.on("error",a=>{this.connected=!1,d.vF.error("Redis error",a)}),await this.redis.ping(),this.connected=!0}catch(a){d.vF.warn("Failed to initialize Redis, using in-memory cache",{error:a}),this.connected=!1}}async get(a){if(!this.connected||!this.redis)return null;try{let b=await this.redis.get(a);return b?JSON.parse(b):null}catch(a){return d.vF.error("Redis get error",a instanceof Error?a:Error(String(a))),null}}async set(a,b,c=3600){if(this.connected&&this.redis)try{await this.redis.setex(a,c,JSON.stringify(b))}catch(a){d.vF.error("Redis set error",a instanceof Error?a:Error(String(a)))}}async del(a){if(this.connected&&this.redis)try{await this.redis.del(a)}catch(a){d.vF.error("Redis del error",a instanceof Error?a:Error(String(a)))}}async exists(a){if(!this.connected||!this.redis)return!1;try{let b=await this.redis.exists(a);return 1===b}catch(a){return d.vF.error("Redis exists error",a instanceof Error?a:Error(String(a))),!1}}async flush(){if(this.connected&&this.redis)try{await this.redis.flushall()}catch(a){d.vF.error("Redis flush error",a instanceof Error?a:Error(String(a)))}}}class g{constructor(){this.redis=new f,this.memory=new e}async get(a){let b=await this.redis.get(a);return null!==b?b:b=await this.memory.get(a)}async set(a,b,c=3600){await Promise.all([this.redis.set(a,b,c),this.memory.set(a,b,c)])}async del(a){await Promise.all([this.redis.del(a),this.memory.del(a)])}async exists(a){return!!await this.redis.exists(a)||await this.memory.exists(a)}async flush(){await Promise.all([this.redis.flush(),this.memory.flush()])}async remember(a,b,c=3600){let d=await this.get(a);if(null!==d)return d;let e=await b();return await this.set(a,e,c),e}async mget(a){return Promise.all(a.map(a=>this.get(a)))}async mset(a){await Promise.all(a.map(({key:a,value:b,ttl:c=3600})=>this.set(a,b,c)))}key(a,...b){return`dealershipai:${a}:${b.join(":")}`}dealerKey(a,...b){return this.key("dealer",a,...b)}scoreKey(a,b){return this.dealerKey(a,"scores",b)}batchKey(a,...b){return this.key("batch",a,...b)}queueKey(...a){return this.key("queue",...a)}}let h=new g},54937:()=>{},88357:(a,b,c)=>{"use strict";c.d(b,{h:()=>f,vF:()=>e});class d{constructor(){this.level=process.env.LOG_LEVEL||"info",this.format=process.env.LOG_FORMAT||"json"}shouldLog(a){let b=["debug","info","warn","error"];return b.indexOf(a)>=b.indexOf(this.level)}formatLog(a){if("json"===this.format)return JSON.stringify({...a,error:a.error?{name:a.error.name,message:a.error.message,stack:a.error.stack}:void 0});let b=`[${a.timestamp}] ${a.level.toUpperCase()}`,c=a.context?` ${JSON.stringify(a.context)}`:"",d=a.error?`
${a.error.stack}`:"";return`${b}: ${a.message}${c}${d}`}log(a,b,c,d){if(!this.shouldLog(a))return;let e={level:a,message:b,timestamp:new Date().toISOString(),context:c,error:d},f=this.formatLog(e);"error"===a?console.error(f):"warn"===a?console.warn(f):console.log(f)}debug(a,b){this.log("debug",a,b)}info(a,b){this.log("info",a,b)}warn(a,b){this.log("warn",a,b)}error(a,b,c){this.log("error",a,c,b)}apiRequest(a,b,c,d){this.info("API Request",{method:a,path:b,status:c,duration_ms:d})}queueJob(a,b,c,d){let e={jobId:a,type:b,...d&&{duration_ms:d}};"failed"===c?this.error(`Queue job ${c}`,void 0,e):this.info(`Queue job ${c}`,e)}costAlert(a,b,c){this.warn("Cost threshold exceeded",{amount:a,threshold:b,period:c,excess:a-b})}}let e=new d;function f(a){let b=new d,c=b.log;return b.log=function(b,d,e,f){let g=`[${a}] ${d}`;return c.call(this,b,g,e,f)},b}},91385:()=>{}};